#!/bin/bash
#file_extracted exists so that the program doesn't continue going when the user doesn't have unzip
file_extracted=1
#Extract the downloaded forge file
extract_zip(){
  if [ ! -e "/bin/unzip" ];
  then
  echo -e "\e[1m\e[31myou need the unzip package to proceed\e[0m"
  exit
  else
  echo "you meet the requirements"
  unzip ./forge-*.zip
  file_extracted=0
  rm ./forge-*.zip
  fi
}
#Asks the user for their desired minecraft version
read -p "What minecraft version would you like to build the mod development environment with?(only supports versions later than 1.6.4) " mc_version
read -p "What forge version would you like to build the mod development environment with? " forge_version
MDKORSRC="mdk"
#Since 1.7 forge and below have files that end with "src" instead of mdk, MDKORSRC exists so that wget can be able to download 1.7 files
if [ $mc_version == "1.7.10" ] || [ $mc_version == "1.7.2" ];
then
MDKORSRC="src"
fi
#Skips file downloading if a zip file is detected
if [ -e ./forge-$mc_version-$forge_version-mdk.zip ] || [ -e ./forge-$mc_version-$forge_version-$mc_version-src.zip ];
then
echo -e '\e[31mzip file detected, skipping download\e[0m'
extract_zip
else
#File downloading
if [ $MDKORSRC == "src" ];
then
wget https://maven.minecraftforge.net/net/minecraftforge/forge/$mc_version-$forge_version-$mc_version/forge-$mc_version-$forge_version-$mc_version-$MDKORSRC.zip
fi
if [ $MDKORSRC == "mdk" ];
then
wget https://maven.minecraftforge.net/net/minecraftforge/forge/$mc_version-$forge_version/forge-$mc_version-$forge_version-$MDKORSRC.zip
fi
extract_zip
fi
if [ $file_extracted == 0 ];
then
#mod personalization to add to build.gradle
echo
echo -e '\e[33mWe are now at the exciting part(A.K.A personalizing the mod)\e[0m'
echo 
read -p 'What would you like your mod name to be? ' mod_name
read -p 'What would you like your mod id to be?(Must not contain spaces or caps) ' mod_id
read -p 'What is your name that you would like the mod to be authored under? ' mod_author
read -p 'What would you like your main package group to be(For example: com.a_weeb_programmer.random_mod) ' group
echo
echo -e '\e[36mGenerating build.gradle...'
#timer for 4 seconds
seconds=4
while [[ 0 -ne $seconds ]]; do
    echo "..........."
    sleep 1
    seconds=$[$seconds-1]
done
echo -e '\e[0m'
fi
build="unknown"
#Generates the build.gradle file
gen_build_gradle(){
  build="unknown"
  #feel free to post this on r/shittycode
  #TODO: FIND A BETTER ALTERNATIVE TO THIS CRAPPY CODE
  if [ $mc_version == "1.7.2" ] || [ $mc_version == "1.7.10" ];
  then
  build="17"
  #The line below fixes an issue with gradle failing on 1.7.10
  echo "
#Wed Jul 02 15:54:47 CDT 2014
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-3.0-bin.zip
" > ./gradle/wrapper/gradle-wrapper.properties
  elif [ $mc_version == "1.8" ] || [ $mc_version == "1.8.8" ] || [ $mc_version == "1.8.9" ];
  then
  build="18"
  elif [ $mc_version == "1.9" ] || [ $mc_version == "1.9.4" ];
  then
  build="19"
  elif [ $mc_version == "1.10" ] || [ $mc_version == "1.10.2" ];
  then
  build="110"
  elif [ $mc_version == "1.11" ] || [ $mc_version == "1.11.2" ];
  then
  build="111"
  elif [ $mc_version == "1.12" ] || [ $mc_version == "1.12.1" ] || [ $mc_version == "1.12.2" ];
  then
  build="112"
  elif [ $mc_version == "1.13.2" ];
  then
  build="113"
  elif [ $mc_version == "1.14.2" ] || [ $mc_version == "1.14.3" ] || [ $mc_version == "1.14.4" ];
  then
  build="114"
  elif [ $mc_version == "1.15" ] || [ $mc_version == "1.15.1" ] || [ $mc_version == "1.15.2" ];
  then
  build="115"
  elif [ $mc_version == "1.16.1" ] || [ $mc_version == "1.16.2" ] || [ $mc_version == "1.16.3" ] || [ $mc_version == "1.16.4" ] || [ $mc_version == "1.16.5" ];
  then
  build="116"
  elif [ $mc_version == "1.17.1" ];
  then
  build="117"
  elif [ $mc_version == "1.18" ] || [ $mc_version == "1.18.1" ] || [ $mc_version == "1.18.2" ];
  then
  build="118"
  fi
  cat ~/buildgradle_templates/$build\_buildgradle.txt | sed s/\<group\>/$group/ | sed s/\<modid\>/$modid/ | sed s/\<mc_version\>/$mc_version/ | sed s/\<mc_version_1\>/$mc_version/ | sed s/\<mod_name\>/$mod_name/ | sed s/\<mod_author\>/$mod_author/ | sed s/\<forge_version\>/$forge_version/ > ./build.gradle
}
if [ $file_extracted == 0 ];
then
gen_build_gradle
echo
echo -e '\e[35mbuild.gradle successfully edited according to your preferences:\e[0m '
echo
#IDE selection, tells the program what command to use according to the IDE the user picks
echo -e '\e[33mWhich IDE are you going to use to develop your mod? \n\n1.Intellij\n2.Eclipse\e[0m'
read -p "type in the number that lists your desired IDE: " ide
while [ $ide -gt 2 ] || [ $ide -lt 1 ];
do
read -p "IDE choice not valid. Please pick a valid ide listed above." ide
done
if [ $ide == "1" ];
then
if [ $build == "17" ] || [ $build == "18" ] || [ $build == "19" ] || [ $build == "110" ] || [ $build == "111" ] || [ $build == "112" ];
then
./gradlew setupDecompWorkspace
else
./gradlew genIntellijRuns
fi
elif [ $ide == "2" ];
then
if [ $build == "17" ] || [ $build == "18" ] || [ $build == "19" ] || [ $build == "110" ] || [ $build == "111" ] || [ $build == "112" ];
then
./gradlew setupDecompWorkspace
./gradlew eclipse
else
./gradlew genIntellijRuns
fi
else
echo "If this message is displaying, please open an issue at https://github.com/a-weeb-programmer/mod-builder/issues page, as this is a bug"
exit
fi
echo
echo -e '\e[36mThe modding environment has successfully been set up. Thank you for using this program.\e[0m'
fi
